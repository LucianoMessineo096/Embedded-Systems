/* REXX (RECORDED BY ZOC V7.25.3 11/07/2020 16:51:41) */

CALL ZocTimeout 60
CALL ZocWaitForSeq "on"

CALL ZocSend "^M^M"

/* A menu item was chosen. To perform the equivalent by script,
use the command: CALL ZocMenuEvent "Paste" */
CALL ZocSend "                : '\n' 10 ;^M                    : BL 32 ;^M                    : ':' [ CHAR : ] LITERAL ;^M                    : ';' [ CHAR ; ] LITERAL ;^M                    : '(' [ CHAR ( ] LITERAL ;^M                    : ')' [ CHAR ) ] LITERAL ;^M                    : '""' [ CHAR "" ] LITERAL ;^M                    : 'A' [ CHAR A ] LITERAL ;^M                    : '0' [ CHAR 0 ] LITERAL ;^M                    : '-' [ CHAR - ] LITERAL ;^M                    : '.' [ CHAR . ] LITERAL ;^M                    : ( IMMEDIA"
CALL ZocSend "TE 1 BEGIN KEY DUP '(' = IF DROP 1+ ELSE ')' = IF 1- THEN THEN DUP 0= UNTIL DROP ;^M                    : SPACES ( n -- ) BEGIN DUP 0> WHILE SPACE 1- REPEAT DROP ;^M                    : WITHIN -ROT OVER <= IF > IF TRUE ELSE FALSE THEN ELSE 2DROP FALSE THEN ;^M                    : ALIGNED ( c-addr -- a-addr ) 3 + 3 INVERT AND ;^M                    : ALIGN HERE @ ALIGNED HERE ! ;^M                    : C, HERE @ C! 1 HERE +! ;^M                    : S"" IMMEDIATE ( -- addr len )^M                        STATE @ IF"
CALL ZocSend "^M                            ' LITS , HERE @ 0 ,^M                            BEGIN KEY DUP '""'^M                                    <> WHILE C, REPEAT^M                            DROP DUP HERE @ SWAP - 4- SWAP ! ALIGN^M                        ELSE^M                            HERE @^M                            BEGIN KEY DUP '""'^M                                    <> WHILE OVER C! 1+ REPEAT^M                            DROP HERE @ - HERE @ SWAP^M                        THEN^M                    ;^M                 "
CALL ZocSend "   : ."" IMMEDIATE ( -- )^M                        STATE @ IF^M                            [COMPILE] S"" ' TELL ,^M                        ELSE^M                            BEGIN KEY DUP '""' = IF DROP EXIT THEN EMIT AGAIN^M                        THEN^M                    ;^M                    : DICT WORD FIND ;^M                    : VALUE ( n -- ) WORD CREATE DOCOL , ' LIT , , ' EXIT , ;^M                    : TO IMMEDIATE ( n -- )^M                    ;^M                    : ID. 4+ COUNT F_LENMASK AND BEGIN DUP 0> "
CALL ZocSend
CALL ZocSend "N 2 PICK OVER <> WHILE NIP DUP @ REPEAT^M                        DROP SWAP ':' EMIT SPACE DUP ID. SPACE^M                        DUP ?IMMEDIATE IF ."" IMMEDIATE "" THEN^M                        >DFA BEGIN 2DUP^M                            > WHILE DUP @ CASE^M                            ' LIT OF 4 + DUP @ . ENDOF^M                            ' LITS OF [ CHAR S ] LITERAL EMIT '""' EMIT SPACE^M                                4 + DUP @ SWAP 4 + SWAP 2DUP TELL '""' EMIT SPACE + ALIGNED 4 -^M                            ENDOF"
CALL ZocSend "^M                            ' 0BRANCH OF ."" 0BRANCH ( "" 4 + DUP @ . ."" ) "" ENDOF^M                            ' BRANCH OF ."" BRANCH ( "" 4 + DUP @ . ."" ) "" ENDOF^M                            ' ' OF [ CHAR ' ] LITERAL EMIT SPACE 4 + DUP @ CFA> ID. SPACE ENDOF^M                            ' EXIT OF 2DUP 4 + <> IF ."" EXIT "" THEN ENDOF^M                            DUP CFA> ID. SPACE^M                        ENDCASE 4 + REPEAT^M                        ';' EMIT CR 2DROP^M                    ;^M                    : :NONA"
CALL ZocSend "ME 0 0 CREATE HERE @ DOCOL , ] ;^M                    : ['] IMMEDIATE ' LIT , ;^M                    : EXCEPTION-MARKER RDROP 0 ;^M                    : CATCH ( xt -- exn? ) DSP@ 4+ >R ' EXCEPTION-MARKER 4+ >R EXECUTE ;^M                    : THROW ( n -- ) ?DUP IF^M                        RSP@ BEGIN DUP R0 4-^M                            < WHILE DUP @ ' EXCEPTION-MARKER 4+^M                            = IF 4+ RSP! DUP DUP DUP R> 4- SWAP OVER ! DSP! EXIT THEN^M                        4+ REPEAT DROP^M                "
CALL ZocSend
CALL ZocSend "DUP ID. [ CHAR + ] LITERAL EMIT SWAP >DFA 4+ - . THEN^M                        ENDCASE 4+ REPEAT DROP CR^M                    ;^M                    : BINARY ( -- ) 2 BASE ! ;^M                    : OCTAL ( -- ) 8 BASE ! ;^M                    : 2# BASE @ 2 BASE ! WORD NUMBER DROP SWAP BASE ! ;^M                    : 8# BASE @ 8 BASE ! WORD NUMBER DROP SWAP BASE ! ;^M                    : # ( b -- n ) BASE @ SWAP BASE ! WORD NUMBER DROP SWAP BASE ! ;^M                    : UNUSED ( -- n ) PAD HERE @ - 4/ ;^M^M       "
CALL ZocSend "             : PAGE 25 BEGIN 1- CR DUP 0<= UNTIL ;^M^M                    : ALLOT^I^I( n -- addr )^M                        HERE @ SWAP^I( here n )^M                        HERE +!^I^I( adds n to HERE, after this the old value of HERE is still on the stack )^M                    ;^M^M                    : CELLS ( n -- n ) 4 * ;^M^M                    : VARIABLE^M                        1 CELLS ALLOT^I( allocate 1 cell of memory, push the pointer to this memory )^M                        WORD CREATE^I( make the dictionary ent"
CALL ZocSend "ry (the name follows VARIABLE) )^M                        DOCOL ,^I^I( append DOCOL (the codeword field of this word) )^M                        ' LIT ,^I^I( append the codeword LIT )^M                        ,^I^I( append the pointer to the new memory )^M                        ' EXIT ,^I( append the codeword EXIT )^M                    ;^M^M                    ( Creare l'array -> VARIABLE <nome> <celle> CELLS ALLOT FIXRASP4 ) ^M                    ( Indirizzo i-esima cella -> <nome> <cella> CELL <?^(7c)@^(7c)!> )^M^M             "
CALL ZocSend "       hex^M^M                    ( Restituisce l'indirizzo i-esima cella dell'array )^M                    : CELL ( addr i -- addr + 4 * i )^M                        CELLS +^M                    ;^M^M                    ( fix per rasp4, modifica l'indirizzo restituendo la cella 0 e non l'indirizzo in cui ^(e8) memorizzata l addr)^M                    : FIXRASP4 ( addr -- )^M                        DUP 8 - !^M                    ;^M^M                ( Variabili i,o per facilitare i cicli, costanti varie)^M            ^M     "
CALL ZocSend "           ( variabili di passaggio )^M                    variable ciclo_i^M                    : i! ciclo_i ! ;^M                    : i ciclo_i @ ;^M                    : i+ i 1 + i! ;^M^M                    variable ciclo_k^M                    : k! ciclo_k ! ;^M                    : k ciclo_k @ ;^M                    : k+ k 1 + k! ;^M                    ^M                    variable ciclo_j^M                    : j! ciclo_j ! ;^M                    : j ciclo_j @ ;^M                    : j+ j 1 + j! ;^M^M             "
CALL ZocSend "       variable lenght^M                    variable posx^M                    variable posy^M^M                    variable cursorx^M                    variable cursory^M^M                ( COSTANTI )^M                    \nel rasp3 ^(e8) 3F000000^M                    FE000000 CONSTANT RASBP4^M^M                ( MAILBOX )^M                    ( Indirizzo base della mailbox Parametro: 1FF4780 -> != 0 O 1FF4760 -> 1 )^M                    : MAILBOX ( n -- addr )^M                        RASBP4 B880 +^M                       "
CALL ZocSend " SWAP^M                        1 = IF 20 + THEN^M                    ;^M^M                    ( VARIABILI MAILBOX )^M                    ( Indirizzo del registro della mailbox ( status , scrittura, lettura, ecc) richiesto sommando l'offset specifico -> github mailbox interface )^M                        : WR 0 + ;^M                        : PEEK 10 + ;^M                        : SENDER 14 + ;^M                        : STATUS 18 + ;^M                        : CONFIG 1C + ;^M^M                        40000000 CONSTANT M"
CALL ZocSend "AILBOXEMPTY ( valore che indica se la mailbox ^(e8) vuota )^M                        0 CONSTANT STARTMAILBOX ( valore che indica un messaggio di richiesta )^M                        0 CONSTANT ENDMAILBOX ( valore che indica la fine di un tag, necessario per la sintassi della richiesta della mailbox)^M                        8 CONSTANT MAILBOXCHANNEL ( canale mailbox attuale )^M^M                        ( PROPRIETA )^M                        8 CONSTANT BITSPERPIXEL ( profondita del framebuffer attuale)^M               "
CALL ZocSend "         400 CONSTANT WIDTH ( altezza framebuffer )^M                        300 CONSTANT HEIGHT ( larghezza framebuffer )^M^M                    ( MAILBOX TAG )^M                    ( Questi tag sono usati per effettuare le richieste in mailbox -> github mailbox interface )^M                        48003 CONSTANT SETPHYSICALWH^M                        40004 CONSTANT SETVIRTUALWH^M                        48005 CONSTANT SETDEPTH^M                        40001 CONSTANT ALLOCATEBUFFER^M                        4800B CON"
CALL ZocSend "STANT SETPALETTE^M                        48001 CONSTANT RELEASEBUFFER^M                        40002 CONSTANT BLANKSCREEN^M                        40004 CONSTANT GETVIRTUALWH^M^M                        08011 CONSTANT CURSORSTATE^M                        08010 CONSTANT CURSORINFO^M^M^M                    ( INDICI PALETTE 0 background 1 LINE 2 LINE2 3 LINE3)^M                        0 CONSTANT PALETTEBACKGROUND^M                        1 CONSTANT PALETTELINE^M                        2 CONSTANT PALETTELINE2^M             "
CALL ZocSend "           3 CONSTANT PALETTELINE3^M^M                        \ Nei vari forum viene sempre richieste un indice per indicare l'ultima palette, ho provato con un numero da 0 a A e da errore, ho provato con 1A e funziona^M                        1A CONSTANT LASTPALETTE^M^M                    ( buffer usato per le richieste via mailbox )^M                    variable MAILBOXBUFFER 40 cells allot FIXRASP4^M^M                    : BUFFER ( -- addr )^M                        MAILBOXBUFFER FFFF0 AND^M                       "
CALL ZocSend " 10 +^M                    ;^M                    50 BUFFER 0 CELL !^M^M^M                    ( Wippa tutta la mailbox  )^M                    : WIPE ( -- )^M^M                        BEGIN^M                            0 MAILBOX @^M                            DROP^M                            1 MAILBOX STATUS @^M                            MAILBOXEMPTY =^M                        UNTIL^M                    ;^M                ^M                    ( Scrittura in mailbox previo wipp )^M                    : WRITE ( addr -- )^M^M"
CALL ZocSend "                        WIPE^M                        MAILBOXCHANNEL OR^M                        1 MAILBOX WR ! ^M                    ;^M^M                    : SETPHYSICAL^M^M                        SETPHYSICALWH BUFFER 2 cell !^M                        8 BUFFER 3 CELL !^M                        STARTMAILBOX BUFFER 4 cell !^M                        WIDTH BUFFER 5 cell ! ^M                        HEIGHT BUFFER 6 cell !^M                    ;^M^M                    : SETVIRTUAL^M^M                        SETVIRTUALWH BUFFER"
CALL ZocSend " 7 cell !^M                        8 BUFFER 8 cell !^M                        STARTMAILBOX BUFFER 9 cell !^M                        WIDTH BUFFER A cell !^M                        HEIGHT BUFFER B cell !^M                    ;^M^M                    : SETDEPTH^M^M                        SETDEPTH BUFFER C cell !^M                        4 BUFFER D cell !^M                        STARTMAILBOX BUFFER E cell !^M                        BITSPERPIXEL BUFFER F cell !^M                    ;^M^M                    : SETCURSORINFO^M   "
CALL ZocSend "                     50 BUFFER 0 CELL !^M                        STARTMAILBOX BUFFER 1 cell !^M                        CURSORINFO BUFFER 2 cell !^M                        24 buffer 3 CELL !^M                        STARTMAILBOX BUFFER 4 cell !^M                        4 buffer 5 cell !^M                        2 buffer 6 cell !^M                        0 BUFFER 7 CELL !^M                        2 buffer 8 cell !^M                        0 BUFFER 9 CELL !^M                        0 BUFFER A CELL !^M                    "
CALL ZocSend "    ENDMAILBOX buffer B cell ! ^M^M                        BUFFER WRITE^M                    ; ^M^M                    : SETCURSOR^M                        50 BUFFER 0 CELL !^M                        STARTMAILBOX BUFFER 1 cell !^M                        CURSORSTATE BUFFER 2 cell !^M                        16 buffer 3 CELL !^M                        STARTMAILBOX BUFFER 4 cell !^M                        1 buffer 5 cell !^M                        cursorx @ buffer 6 cell !^M                        cursory @ buffer 7 cell !^M"
CALL ZocSend "                        1 buffer 8 cell !^M                        ENDMAILBOX buffer 9 cell ! ^M^M                        BUFFER WRITE^M                    ;^M                                ^M                    ( creazione di nuovo framebuffer )^M                    : ALLOCATEFRAMEBUFFER ( -- )^M                        STARTMAILBOX BUFFER 1 cell !^M^M                        SETPHYSICAL^M                        SETVIRTUAL^M                        SETDEPTH^M^M                        ALLOCATEBUFFER BUFFER 10 cell !^M      "
CALL ZocSend "                  8 BUFFER 11 cell !^M                        8 BUFFER 12 cell !^M                        1000 BUFFER 13 cell !^M^M                        ENDMAILBOX BUFFER 14 cell !^M                        ^M                        BUFFER WRITE^M                    ;^M                    ( Cambia il colore di uno o pi^(f9) indici di palette )^M                    : SETMULTIPALETTE ( -2 colore1 indice1 colore2 indice2 ... -- )^M^M                        STARTMAILBOX BUFFER 1 cell !^M                        0 k!^M          "
CALL ZocSend "              2 i!^M                        BEGIN^M                            SETPALETTE BUFFER i cell !^M                            i+^M                            C BUFFER i cell !^M                            i+^M                            STARTMAILBOX BUFFER i cell ! ^M                            i+^M                            BUFFER i cell !^M                            i+^M                            1 BUFFER i cell !^M                            i+^M                            BUFFER i cell !^M               "
CALL ZocSend "             i+^M                            k+^M                            DUP -2 = ^M                        UNTIL^M                        DROP^M^M                        C 6 4 k * * + BUFFER 0 cell !^M^M                        ENDMAILBOX BUFFER i cell !^M^M                        BUFFER WRITE^M                    ;^M^M               ( Cambia colori palettes, abilita schermo e release buffer )^M                ^M                        : RELEASEBUFFER ( -- )^M                            10 BUFFER 0 CELL !^M             "
CALL ZocSend "               STARTMAILBOX BUFFER 1 CELL !^M                            RELEASEBUFFER BUFFER 2 CELL !^M                            ENDMAILBOX BUFFER 3 CELL !^M                            BUFFER WRITE^M                        ;^M                        ^M                        : BLANKSCREENY ( -- )^M^M                            30 BUFFER 0 CELL !^M                            STARTMAILBOX BUFFER 1 CELL !^M                            BLANKSCREEN BUFFER 2 CELL !^M                            4 BUFFER 3 CELL !^M          "
CALL ZocSend "                  STARTMAILBOX BUFFER 4 CELL !^M                            1 buffer 5 cell !^M                            ENDMAILBOX BUFFER 6 CELL !^M^M                            BUFFER WRITE^M                        ;^M^M                        : BLANKSCREENN ( -- )^M^M                            30 BUFFER 0 CELL !^M                            STARTMAILBOX BUFFER 1 CELL !^M                            BLANKSCREEN BUFFER 2 CELL !^M                            4 BUFFER 3 CELL !^M                            STARTMAILBOX B"
CALL ZocSend "UFFER 4 CELL !^M                            0 buffer 5 cell !^M                            ENDMAILBOX BUFFER 6 CELL !^M^M                            BUFFER WRITE^M                        ;^M^M                        : GETVIRTUALWHFRAMEBUFFER ( -- )^M^M                            30 BUFFER 0 CELL !^M                            STARTMAILBOX BUFFER 1 CELL !^M                            GETVIRTUALWH BUFFER 2 CELL !^M                            ENDMAILBOX BUFFER 3 CELL !^M                            BUFFER WRITE^M            "
CALL ZocSend "            ;^M^M                        : SETSINGLEPALETTE ( colore indice -- )^M                            -2 -2 2OVER^M                            SETMULTIPALETTE^M                            DROP DROP DROP^M                        ;^M                        ^M                         ( Per una semplicita nel codice si ^(e8) preferito distinguere i casi in parole diverse )^M                        : CHANGEBACKGROUND ( colore -- )^M                            0 \che ^(e8) l'indice del background^M                          "
CALL ZocSend "  -2 -2 2OVER^M                            SETMULTIPALETTE^M                            DROP DROP DROP^M                        ;^M^M                        : CHANGELINE1 ( colore -- )^M                            1 \che ^(e8) l'indice della line 1^M                            -2 -2 2OVER^M                            SETMULTIPALETTE^M                            DROP DROP DROP^M                        ;^M^M                        : CHANGELINE2 ( colore -- )^M                            2 \che ^(e8) l'indice che ^(e8) l'indice della "
CALL ZocSend "line 2^M                            -2 -2 2OVER^M                            SETMULTIPALETTE^M                            DROP DROP DROP^M                        ;^M^M                        : CHANGELINE3 ( colore -- )^M                            3 \che ^(e8) l'indice che ^(e8) l'indice della line 3^M                            -2 -2 2OVER^M                            SETMULTIPALETTE^M                            DROP DROP DROP^M                        ;^M^M                        : INIZIALIZZAPALETTE ( -- )^M                   "
CALL ZocSend "         50 BUFFER 0 cell !^M                            STARTMAILBOX BUFFER 1 cell !^M                            SETPALETTE BUFFER 2 cell !^M                            E4 BUFFER 3 cell !^M                            STARTMAILBOX BUFFER 4 cell !^M                            PALETTEBACKGROUND BUFFER 5 cell ! ^M                            LASTPALETTE BUFFER 6 cell !^M^M                            ( PALETTEBACKGROUND )^M                            FF000000 BUFFER 7 cell !^M                            ( PALETTELINE )^M "
CALL ZocSend "                           FFFFFFFF BUFFER 8 cell !^M                            ( PALETTELINE2 )^M                            ffaab0c3 BUFFER 9 cell !^M                            ( PALETTELINE3 )^M                            FFFFFFFF BUFFER 10 cell !^M                            ^M^M                            ENDMAILBOX BUFFER 7 LASTPALETTE + cell !^M^M                            BUFFER WRITE      ^M                        ;^M^M                ( TIMER )^M                        FE003000 constant CS ^M                 "
CALL ZocSend "       FE003004 constant CLO^M                        FE003008 constant CHI^M                        FE00300C constant C0^M                        : delay CLO @ + C0 ! BEGIN CS @ 1 = UNTIL ;^M^M                        : TIMER ( -- )^M                        20000 delay^M                        ;^M^M                ( SETUP )^M                        ALLOCATEFRAMEBUFFER ^M                        BUFFER 13 CELL @ 3FFFFFFF AND CONSTANT FRAMEBUFFER^M                        INIZIALIZZAPALETTE^M^M                ( MAIN )^M      "
CALL ZocSend "          ( DRAW FUNCTION )^M                    ^M                            : DRAWV ( color posx posy lenght  -- )^M                                lenght !^M                                posy !^M                                posx !^M                                0 i!^M                                BEGIN^M                                    DUP^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + ! ^M                                    posy @ 1 + posy !^M                               "
CALL ZocSend "     i+^M                                    i lenght @ =^M                                UNTIL^M                                drop^M                            ;^M^M                            : DRAWH ( color posx posy lenght -- )^M                                ^M                                lenght !^M                                posy !^M                                posx !^M                                ^M                                0 j!^M                                BEGIN^M                       "
CALL ZocSend "             0 i!^M                                    BEGIN^M                                        DUP^M                                        FRAMEBUFFER posx @ + posy @ WIDTH * + i + !^M                                        i 4 + i!^M                                        i lenght @ =^M                                    UNTIL^M                                    posy @ 1 + posy !^M                                    j+^M                                    j 4 = ^M                                UNTIL^M      "
CALL ZocSend "                          drop^M                            ;^M                ^M                ( PRINT NUMBERS )^M^M                                ( Array utilizzati per memorizzare i valori da memorizzare nel framebuffer per stampare un numero )^M                                    variable num0 50 cells allot FIXRASP4^M                                    variable num1 50 CELLS ALLOT FIXRASP4^M                        ^M^M                                ( Array per recuperare gli array numX )^M                     "
CALL ZocSend "           variable NumeroPalette 8 CELLS ALLOT FIXRASP4^M                                    num0 NumeroPalette 0 cell !^M                                    num1 NumeroPalette 1 cell !^M                                ^M^M                                variable temp^M                            ( Carica nell'array specificato tutti i valori contenuti nello stack fino a quando il valore -1)^M                                : load ( -1 a1 a2 a3 ... an addr -- )^M                                    0 i!^M           "
CALL ZocSend "                         temp !^M                                    BEGIN^M                                        temp @ i CELL ! ^M                                        ^M                                        i+^M                                        ^M                                        dup^M                                        -1^M                                        =^M                                    UNTIL^M                                    DROP^M                                ;^M^M^M        "
CALL ZocSend "                    ( NUMBERS )^M                                   -1 0 1010101 0 101 0 1010000 10000 0 100 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 10000 0 100 101 0 1010000 0 1010101 0^M^M                                    num0 load^M^M                                    -1 1010101 1010101 1010101 10101010 10101010 10101010 ^M                                        0 10100 0 0 10100 0 0 10100 0 0 10100 0 0 10100 0 0 ^M              "
CALL ZocSend "                          10100 0 0 10100 0 0 10100 101 0 10100 10101 0 10100^M                                        1010100 0 10101 1010000 0 10101 1000000 0 10101 0 0 1010101 0^M^M                                    num1 load^M                                    ^M             ^M^M                            : STAMP ( n -- )^M                                        ^M                                        DUP^M                                        1^M                                        swap NumeroPalette sw"
CALL ZocSend "ap CELL @^M                                        0 i!^M                                        BEGIN^M                                            2DUP^M                                            i cell @^M                                            SWAP^M                                            framebuffer i 3 mod 4 * + WIDTH i 3 / * +^M                                            SWAP^M                                            drop 30 2 WIDTH * * +^M                                            EA 2 * +^M      "
CALL ZocSend "                                      !^M                                        ^M                                            i+^M                                            i 30 =^M                                        UNTIL^M                                        DROP DROP DROP^M                                    ;^M^M                ( CURSOR AND DRAWING CURSOR FUNCTION )^M^M                        : ERROR ^M                         41 54 41 52 52 45 20 58 emit emit emit emit emit emit emit emit^M               "
CALL ZocSend "         ;^M^M                        ( Le funzioni P AGGIUNGONO il valore n alla posizione attuale )^M                        : MOVEPX ( n -- )^M                            DUP^M                            4 mod 0 =^M                            IF ^M                             cursorx @ + cursorx !^M                            SETCURSOR^M                            ELSE^M                            ERROR^M                            THEN^M                        ;^M^M                        : MOVEPY ( n -- )^M          "
CALL ZocSend "                  cursory @ + cursory !^M                            SETCURSOR^M                        ;^M^M                        ( Le funzioni SENZA P spostano il cursore nella posizione desiderata )^M^M                        : MOVEX ( n -- )^M                            DUP^M                            4 mod 0 =^M                            IF ^M                            cursorx !^M                            SETCURSOR^M                            ELSE^M                            ERROR^M                         "
CALL ZocSend "   THEN^M                        ;^M^M                        : MOVEY ( n -- )^M                            cursory !^M                            SETCURSOR^M                        ;^M^M                        : MOVEXY ( posx posy -- )^M                           MOVEY^M                           MOVEX^M                        ;^M                        ^M                        : GETPOSXY ( -- posx posy)^M                         cursorx @^M                         cursory @^M                        ;^M^M                  "
CALL ZocSend "      : MOVECURSOR ( -- )^M                         posx @ posy @ movexy^M                        ;^M        ^M                        ( Cursor variables )^M                            01010101 CONSTANT LINE1^M                            02020202 CONSTANT LINE2^M                            03030303 CONSTANT LINE3^M^M                            variable defaultline^M                            variable color^M                            variable angular^M                            50 50 MOVEXY^M                         "
CALL ZocSend "   SETCURSORINFO^M                            SETCURSOR^M^M                        : SETDEFAULTLINE ( COLOR -- )^M                            defaultline !^M                        ;^M^M                        line1 SETDEFAULTLINE ^M^M                        : DRAWVD ( lenght  -- )^M                                GETPOSXY^M                                posy !^M                                posx !^M                                lenght !^M                                0 i!^M                                DEFAULTLI"
CALL ZocSend "NE @^M                                BEGIN^M                                    DUP^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posy @ 1 + posy !^M                                    i+^M                                    i lenght @ =^M                                UNTIL^M                                MOVECURSOR^M                                drop^M                            ;^M                    ^M                        : DRAWHR ( lenght "
CALL ZocSend " -- )^M                                GETPOSXY^M                                posy !^M                                posx !^M                                lenght !^M                                0 i!^M                                DEFAULTLINE @ ^M                                BEGIN^M                                    DUP^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posx @ 4 + posx !^M                                    i+^M               "
CALL ZocSend "                     i lenght @ =^M                                UNTIL^M                                MOVECURSOR^M                                drop^M                            ;^M^M                        : DRAWHL ( lenght  -- )^M                                GETPOSXY^M                                posy !^M                                posx !^M                                lenght !^M                                0 i!^M                                DEFAULTLINE @ ^M                                BEGIN"
CALL ZocSend "^M                                    DUP^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posx @ 4 - posx !^M                                    i+^M                                    i lenght @ =^M                                UNTIL^M                                MOVECURSOR^M                                drop^M                            ;^M^M                        : DRAWVU ( lenght  -- )^M                                GETPOSXY^M               "
CALL ZocSend "                 posy !^M                                posx !^M                                lenght !^M                                0 i!^M                                DEFAULTLINE @^M                                BEGIN^M                                    DUP^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posy @ 1 - posy !^M                                    i+^M                                    i lenght @ =^M                             "
CALL ZocSend "   UNTIL^M                                MOVECURSOR^M                                drop^M                            ;^M                    ^M                        : OBBDR ( line angular lenght  -- )^M                                GETPOSXY^M                                ^M                                posy !^M                                posx !^M                                lenght !^M                                angular !^M                                color !^M                                0 i!^M"
CALL ZocSend "^M                                BEGIN^M                                    0 j!^M                                    begin^M                                    color @^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posy @ 1 + posy !^M                                    j+^M                                    j angular @ =^M                                    until^M^M^M                                    color @^M                                    FRA"
CALL ZocSend "MEBUFFER posx @ + posy @ WIDTH * + !^M                                    posx @ 4 + posx !^M                                    i+^M                                    i lenght @ =^M                                UNTIL^M                                    MOVECURSOR^M                                ^M                            ;^M                        ^M                        : OBBDL ( line angular lenght  -- )^M                                GETPOSXY^M                                posy !^M                    "
CALL ZocSend "            posx !^M                                lenght !^M                                angular ! ^M                                color !^M^M                                0 i!^M                                ^M                                BEGIN^M                                    0 j!^M                                    begin^M                                    color @^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posy @ 1 + posy !^M   "
CALL ZocSend "                                 j+^M                                    j angular @ =^M                                    until^M                                    ^M                                    color @^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posx @ 4 - posx !^M                                ^M                                    i+^M                                    i lenght @ =^M                                UNTIL^M              "
CALL ZocSend "                      MOVECURSOR^M                            ;^M                                            ^M                        : OBBUL ( line angular lenght  -- )^M                                GETPOSXY^M                                posy !^M                                posx !^M                                lenght !^M                                angular !^M                                color !^M                                0 i!^M                                ^M                                "
CALL ZocSend "BEGIN^M                                    0 j!^M                                    begin^M                                    color @^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posy @ 1 - posy !^M                                    j+^M                                    j angular @ =^M                                    until^M                                    ^M                                    color @^M                                    F"
CALL ZocSend "RAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posx @ 4 - posx !^M                                ^M                                    i+^M                                    i lenght @ =^M                                UNTIL^M                                    MOVECURSOR^M                            ;^M                        ^M                        : OBBUR ( line angular lenght  -- )^M                                GETPOSXY^M                                posy !^M                  "
CALL ZocSend "              posx !^M                                lenght !^M                                angular !^M                                color !^M                                0 i!^M                                BEGIN^M                                    0 j!^M                                    begin^M                                    color @^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posy @ 1 - posy !^M                                    "
CALL ZocSend "j+^M                                    j angular @ =^M                                    until^M                                    ^M                                    color @^M                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !^M                                    posx @ 4 + posx !^M                                    MOVECURSOR^M                                    i+^M                                    i lenght @ =^M                                UNTIL^M                                ^M"
CALL ZocSend "                            ;^M    ^M                ^M                ( EXAMPLES )^M                    : SCREENSAVERSTART^M                    52 45 56 41 53 4E 45 45 52 43 53 emit emit emit emit emit emit emit emit emit emit emit ^M                    ;^M^M                    : SCREENSAVERFINISH^M                        4F 54 49 4E 49 46 emit emit emit emit emit emit    ^M                    ; ^M^M                    : CLEAN ( -- )^M                        -90 12 movexy^M^M                        ff000000 CHANGELINE3^M^M"
CALL ZocSend "                        line3 SETDEFAULTLINE^M^M                        30000 drawhr^M^M                        0 12 movexy^M                        SCREENSAVERFINISH^M                    ;^M                    ^M                    : SCREENSAVER1^M                        SCREENSAVERSTART^M                            FFFFFFFF CHANGEBACKGROUND^M                            timer timer^M                            FF000000 CHANGEBACKGROUND^M                            timer timer^M                            FFFF0000 CHANGE"
CALL ZocSend "BACKGROUND^M                            timer timer^M                            FF00FF00 CHANGEBACKGROUND^M                            timer timer^M                            FF0000FF CHANGEBACKGROUND^M                            timer timer^M                            FFFFFFFF CHANGEBACKGROUND^M                            timer timer^M                            FF000000 CHANGEBACKGROUND^M                        SCREENSAVERFINISH^M                    ;^M^M                    : SCREENSAVER2^M                        C"
CALL ZocSend "LEAN^M                        -90 12 movexy^M                        FF0000ff CHANGELINE1^M                        line1 SETDEFAULTLINE^M                        30000 DRAWHR^M^M                        -90 12 movexy^M                        FFff00ff CHANGELINE2^M                        LINE2 SETDEFAULTLINE^M                        30000 DRAWHR^M^M                        -90 12 movexy^M                        FF808080 CHANGELINE1^M                        line1 SETDEFAULTLINE^M                        30000 DRAWHR^M^M         "
CALL ZocSend "               -90 12 movexy^M                        FF008080 CHANGELINE2^M                        LINE2 SETDEFAULTLINE^M                        30000 DRAWHR^M^M                        -90 12 movexy^M                        FFFFFFFF CHANGELINE1^M                        line1 SETDEFAULTLINE^M                        30000 DRAWHR^M^M                        CLEAN^M                    ;^M^M                    : HEART ( posx posy -- )^M                            movexy^M                            line1 5 5 obbul^M            "
CALL ZocSend "                line1 4 5 obbdl^M                            line1 4 5 obbdl^M                            line1 5 10 obbdr^M                            line1 5 10 obbur^M                            line1 4 5 obbul^M                            line1 4 5 obbul^M                            line1 5 5 obbdl^M                            ff0000ff CHANGELINE1^M                    ;^M^M                    : HEARTS ( -- )^M                            50 50 HEART^M                            100 50 heart^M                         "
CALL ZocSend "   150 50 heart^M                            200 50 heart^M                            250 50 heart^M                            300 50 heart^M^M                            50 100 HEART^M                            100 100 heart^M                            150 100 heart^M                            200 100 heart^M                            250 100 heart^M                            300 100 heart^M^M                            50 200 HEART^M                            100 200 heart^M                            150 200 h"
CALL ZocSend "eart^M                            200 200 heart^M                            250 200 heart^M                            300 200 heart^M^M                        SCREENSAVERFINISH^M^M                    ;^M^M                    ( TABLE EXAMPLE )^M                        variable foot ^M                        variable body ^M                        : TABLE  (  colorbody colorfoot -- )^M                        foot !^M                        body !^M                        ^M                            foot @ 0A4 188 0B8 DRA"
CALL ZocSend "WV \ PUNTA ALTA ^M                            foot @ 0A0 188 0B8 DRAWV \ PUNTA ALTA^M                            foot @ 084 198 140 DRAWV \ PUNTA bassa^M                            body @ 088 198 140 DRAWV \ PUNTA bassa^M                            body @ 09c 180 10 DRAWH^M                            body @ 098 184 18 DRAWH^M                            body @ 094 188 20 DRAWH^M                            body @ 090 18c 28 DRAWH^M                            body @ 08c 190 30 DRAWH^M                            body @ "
CALL ZocSend "088 194 38 DRAWH^M                            body @ 084 198 40 DRAWH^M                            body @ 080 19C 48 DRAWH^M                            body @ 07C 1a0 50 DRAWH^M                            body @ 078 1a4 58 DRAWH^M                            body @ 074 1a8 60 DRAWH^M                            body @ 070 1ac 68 DRAWH^M                            body @ 06C 1b0 70 DRAWH^M                            body @ 068 1b4 78 DRAWH^M                            body @ 064 1b8 80 DRAWH^M                           "
CALL ZocSend " body @ 060 1bc 88 DRAWH^M                            body @ 05C 1c0 8C DRAWH^M                            body @ 058 1C4 8C DRAWH^M                            body @ 054 1C8 8C DRAWH^M                            body @ 050 1CC 8C DRAWH^M                            body @ 04C 1d0 8C DRAWH^M                            body @ 048 1d4 8C DRAWH^M                            body @ 044 1d8 8C DRAWH^M                            ^M                            foot @ 044 1d8 0AC DRAWV \ sinistra verticale^M                    "
CALL ZocSend "        foot @ 048 1d8 0AC DRAWV \ sinistra verticale^M^M                            body @ 044 1dc 88 DRAWH^M                            body @ 048 1E0 80 DRAWH^M                            body @ 04C 1E4 78 DRAWH^M                            body @ 050 1E8 70 DRAWH^M                            body @ 054 1EC 68 DRAWH^M                            body @ 058 1F0 60 DRAWH^M                            body @ 05C 1F4 58 DRAWH^M                            body @ 060 1F8 50 DRAWH^M                            body @ 064 1F"
CALL ZocSend "C 48 DRAWH^M                            body @ 068 200 40 DRAWH^M                            body @ 06C 204 38 DRAWH^M                            body @ 070 208 30 DRAWH^M                            body @ 074 20C 28 DRAWH^M                            body @ 078 210 20 DRAWH^M                            body @ 07C 214 18 DRAWH^M                            body @ 080 218 10 DRAWH^M                            body @ 084 21C 8 DRAWH^M^M                            foot @ E0 1C8 0B0 DRAWV \ DESTRA VERTICALE ^M             "
CALL ZocSend "               foot @ E4 1C4 0B4 DRAWV \ DESTRA VERTICALE^M                        ;^M                ^M"

CALL ZocWait ";"
CALL ZocSend "^M^M"
