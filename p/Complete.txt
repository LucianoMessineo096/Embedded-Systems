                : '\n' 10 ;
                    : BL 32 ;
                    : ':' [ CHAR : ] LITERAL ;
                    : ';' [ CHAR ; ] LITERAL ;
                    : '(' [ CHAR ( ] LITERAL ;
                    : ')' [ CHAR ) ] LITERAL ;
                    : '"' [ CHAR " ] LITERAL ;
                    : 'A' [ CHAR A ] LITERAL ;
                    : '0' [ CHAR 0 ] LITERAL ;
                    : '-' [ CHAR - ] LITERAL ;
                    : '.' [ CHAR . ] LITERAL ;
                    : ( IMMEDIATE 1 BEGIN KEY DUP '(' = IF DROP 1+ ELSE ')' = IF 1- THEN THEN DUP 0= UNTIL DROP ;
                    : SPACES ( n -- ) BEGIN DUP 0> WHILE SPACE 1- REPEAT DROP ;
                    : WITHIN -ROT OVER <= IF > IF TRUE ELSE FALSE THEN ELSE 2DROP FALSE THEN ;
                    : ALIGNED ( c-addr -- a-addr ) 3 + 3 INVERT AND ;
                    : ALIGN HERE @ ALIGNED HERE ! ;
                    : C, HERE @ C! 1 HERE +! ;
                    : S" IMMEDIATE ( -- addr len )
                        STATE @ IF
                            ' LITS , HERE @ 0 ,
                            BEGIN KEY DUP '"'
                                    <> WHILE C, REPEAT
                            DROP DUP HERE @ SWAP - 4- SWAP ! ALIGN
                        ELSE
                            HERE @
                            BEGIN KEY DUP '"'
                                    <> WHILE OVER C! 1+ REPEAT
                            DROP HERE @ - HERE @ SWAP
                        THEN
                    ;
                    : ." IMMEDIATE ( -- )
                        STATE @ IF
                            [COMPILE] S" ' TELL ,
                        ELSE
                            BEGIN KEY DUP '"' = IF DROP EXIT THEN EMIT AGAIN
                        THEN
                    ;
                    : DICT WORD FIND ;
                    : VALUE ( n -- ) WORD CREATE DOCOL , ' LIT , , ' EXIT , ;
                    : TO IMMEDIATE ( n -- )
                    ;
                    : ID. 4+ COUNT F_LENMASK AND BEGIN DUP 0> WHILE SWAP COUNT EMIT SWAP 1- REPEAT 2DROP ;
                    : ?HIDDEN 4+ C@ F_HIDDEN AND ;
                    : ?IMMEDIATE 4+ C@ F_IMMED AND ;
                    : WORDS LATEST @ BEGIN ?DUP WHILE DUP ?HIDDEN NOT IF DUP ID. SPACE THEN @ REPEAT CR ;
                    : FORGET DICT DUP @ LATEST ! HERE ! ;
                    : CFA> LATEST @ BEGIN ?DUP WHILE 2DUP SWAP < IF NIP EXIT THEN @ REPEAT DROP 0 ;
                    : SEE
                        DICT HERE @ LATEST @
                        BEGIN 2 PICK OVER <> WHILE NIP DUP @ REPEAT
                        DROP SWAP ':' EMIT SPACE DUP ID. SPACE
                        DUP ?IMMEDIATE IF ." IMMEDIATE " THEN
                        >DFA BEGIN 2DUP
                            > WHILE DUP @ CASE
                            ' LIT OF 4 + DUP @ . ENDOF
                            ' LITS OF [ CHAR S ] LITERAL EMIT '"' EMIT SPACE
                                4 + DUP @ SWAP 4 + SWAP 2DUP TELL '"' EMIT SPACE + ALIGNED 4 -
                            ENDOF
                            ' 0BRANCH OF ." 0BRANCH ( " 4 + DUP @ . ." ) " ENDOF
                            ' BRANCH OF ." BRANCH ( " 4 + DUP @ . ." ) " ENDOF
                            ' ' OF [ CHAR ' ] LITERAL EMIT SPACE 4 + DUP @ CFA> ID. SPACE ENDOF
                            ' EXIT OF 2DUP 4 + <> IF ." EXIT " THEN ENDOF
                            DUP CFA> ID. SPACE
                        ENDCASE 4 + REPEAT
                        ';' EMIT CR 2DROP
                    ;
                    : :NONAME 0 0 CREATE HERE @ DOCOL , ] ;
                    : ['] IMMEDIATE ' LIT , ;
                    : EXCEPTION-MARKER RDROP 0 ;
                    : CATCH ( xt -- exn? ) DSP@ 4+ >R ' EXCEPTION-MARKER 4+ >R EXECUTE ;
                    : THROW ( n -- ) ?DUP IF
                        RSP@ BEGIN DUP R0 4-
                            < WHILE DUP @ ' EXCEPTION-MARKER 4+
                            = IF 4+ RSP! DUP DUP DUP R> 4- SWAP OVER ! DSP! EXIT THEN
                        4+ REPEAT DROP
                        CASE
                            0 1- OF ." ABORTED" CR ENDOF
                            ." UNCAUGHT THROW " DUP . CR
                        ENDCASE QUIT THEN
                    ;
                    : ABORT ( -- ) 0 1- THROW ;
                    : PRINT-STACK-TRACE
                        RSP@ BEGIN DUP R0 4-
                            < WHILE DUP @ CASE
                            ' EXCEPTION-MARKER 4+ OF ." CATCH ( DSP=" 4+ DUP @ U. ." ) " ENDOF
                            DUP CFA> ?DUP IF 2DUP ID. [ CHAR + ] LITERAL EMIT SWAP >DFA 4+ - . THEN
                        ENDCASE 4+ REPEAT DROP CR
                    ;
                    : BINARY ( -- ) 2 BASE ! ;
                    : OCTAL ( -- ) 8 BASE ! ;
                    : 2# BASE @ 2 BASE ! WORD NUMBER DROP SWAP BASE ! ;
                    : 8# BASE @ 8 BASE ! WORD NUMBER DROP SWAP BASE ! ;
                    : # ( b -- n ) BASE @ SWAP BASE ! WORD NUMBER DROP SWAP BASE ! ;
                    : UNUSED ( -- n ) PAD HERE @ - 4/ ;

                    : PAGE 25 BEGIN 1- CR DUP 0<= UNTIL ;

                    : ALLOT		( n -- addr )
                        HERE @ SWAP	( here n )
                        HERE +!		( adds n to HERE, after this the old value of HERE is still on the stack )
                    ;

                    : CELLS ( n -- n ) 4 * ;

                    : VARIABLE
                        1 CELLS ALLOT	( allocate 1 cell of memory, push the pointer to this memory )
                        WORD CREATE	( make the dictionary entry (the name follows VARIABLE) )
                        DOCOL ,		( append DOCOL (the codeword field of this word) )
                        ' LIT ,		( append the codeword LIT )
                        ,		( append the pointer to the new memory )
                        ' EXIT ,	( append the codeword EXIT )
                    ;

                    ( Creare l'array -> VARIABLE <nome> <celle> CELLS ALLOT FIXRASP4 ) 
                    ( Indirizzo i-esima cella -> <nome> <cella> CELL <?|@|!> )

                    hex

                    ( Restituisce l'indirizzo i-esima cella dell'array )
                    : CELL ( addr i -- addr + 4 * i )
                        CELLS +
                    ;

                    ( fix per rasp4, modifica l'indirizzo restituendo la cella 0 e non l'indirizzo in cui è memorizzata l addr)
                    : FIXRASP4 ( addr -- )
                        DUP 8 - !
                    ;

                ( Variabili i,o per facilitare i cicli, costanti varie)
            
                ( variabili di passaggio )
                    variable ciclo_i
                    : i! ciclo_i ! ;
                    : i ciclo_i @ ;
                    : i+ i 1 + i! ;

                    variable ciclo_k
                    : k! ciclo_k ! ;
                    : k ciclo_k @ ;
                    : k+ k 1 + k! ;
                    
                    variable ciclo_j
                    : j! ciclo_j ! ;
                    : j ciclo_j @ ;
                    : j+ j 1 + j! ;

                    variable lenght
                    variable posx
                    variable posy

                    variable cursorx
                    variable cursory

                ( COSTANTI )
                    \nel rasp3 è 3F000000
                    FE000000 CONSTANT RASBP4

                ( MAILBOX )
                    ( Indirizzo base della mailbox Parametro: 1FF4780 -> != 0 O 1FF4760 -> 1 )
                    : MAILBOX ( n -- addr )
                        RASBP4 B880 +
                        SWAP
                        1 = IF 20 + THEN
                    ;

                    ( VARIABILI MAILBOX )
                    ( Indirizzo del registro della mailbox ( status , scrittura, lettura, ecc) richiesto sommando l'offset specifico -> github mailbox interface )
                        : WR 0 + ;
                        : PEEK 10 + ;
                        : SENDER 14 + ;
                        : STATUS 18 + ;
                        : CONFIG 1C + ;

                        40000000 CONSTANT MAILBOXEMPTY ( valore che indica se la mailbox è vuota )
                        0 CONSTANT STARTMAILBOX ( valore che indica un messaggio di richiesta )
                        0 CONSTANT ENDMAILBOX ( valore che indica la fine di un tag, necessario per la sintassi della richiesta della mailbox)
                        8 CONSTANT MAILBOXCHANNEL ( canale mailbox attuale )

                        ( PROPRIETA )
                        8 CONSTANT BITSPERPIXEL ( profondita del framebuffer attuale)
                        400 CONSTANT WIDTH ( altezza framebuffer )
                        300 CONSTANT HEIGHT ( larghezza framebuffer )

                    ( MAILBOX TAG )
                    ( Questi tag sono usati per effettuare le richieste in mailbox -> github mailbox interface )
                        48003 CONSTANT SETPHYSICALWH
                        40004 CONSTANT SETVIRTUALWH
                        48005 CONSTANT SETDEPTH
                        40001 CONSTANT ALLOCATEBUFFER
                        4800B CONSTANT SETPALETTE
                        48001 CONSTANT RELEASEBUFFER
                        40002 CONSTANT BLANKSCREEN
                        40004 CONSTANT GETVIRTUALWH

                        08011 CONSTANT CURSORSTATE
                        08010 CONSTANT CURSORINFO


                    ( INDICI PALETTE 0 background 1 LINE 2 LINE2 3 LINE3)
                        0 CONSTANT PALETTEBACKGROUND
                        1 CONSTANT PALETTELINE
                        2 CONSTANT PALETTELINE2
                        3 CONSTANT PALETTELINE3

                        \ Nei vari forum viene sempre richieste un indice per indicare l'ultima palette, ho provato con un numero da 0 a A e da errore, ho provato con 1A e funziona
                        1A CONSTANT LASTPALETTE

                    ( buffer usato per le richieste via mailbox )
                    variable MAILBOXBUFFER 40 cells allot FIXRASP4

                    : BUFFER ( -- addr )
                        MAILBOXBUFFER FFFF0 AND
                        10 +
                    ;
                    50 BUFFER 0 CELL !


                    ( Wippa tutta la mailbox  )
                    : WIPE ( -- )

                        BEGIN
                            0 MAILBOX @
                            DROP
                            1 MAILBOX STATUS @
                            MAILBOXEMPTY =
                        UNTIL
                    ;
                
                    ( Scrittura in mailbox previo wipp )
                    : WRITE ( addr -- )

                        WIPE
                        MAILBOXCHANNEL OR
                        1 MAILBOX WR ! 
                    ;

                    : SETPHYSICAL

                        SETPHYSICALWH BUFFER 2 cell !
                        8 BUFFER 3 CELL !
                        STARTMAILBOX BUFFER 4 cell !
                        WIDTH BUFFER 5 cell ! 
                        HEIGHT BUFFER 6 cell !
                    ;

                    : SETVIRTUAL

                        SETVIRTUALWH BUFFER 7 cell !
                        8 BUFFER 8 cell !
                        STARTMAILBOX BUFFER 9 cell !
                        WIDTH BUFFER A cell !
                        HEIGHT BUFFER B cell !
                    ;

                    : SETDEPTH

                        SETDEPTH BUFFER C cell !
                        4 BUFFER D cell !
                        STARTMAILBOX BUFFER E cell !
                        BITSPERPIXEL BUFFER F cell !
                    ;

                    : SETCURSORINFO
                        50 BUFFER 0 CELL !
                        STARTMAILBOX BUFFER 1 cell !
                        CURSORINFO BUFFER 2 cell !
                        24 buffer 3 CELL !
                        STARTMAILBOX BUFFER 4 cell !
                        4 buffer 5 cell !
                        2 buffer 6 cell !
                        0 BUFFER 7 CELL !
                        2 buffer 8 cell !
                        0 BUFFER 9 CELL !
                        0 BUFFER A CELL !
                        ENDMAILBOX buffer B cell ! 

                        BUFFER WRITE
                    ; 

                    : SETCURSOR
                        50 BUFFER 0 CELL !
                        STARTMAILBOX BUFFER 1 cell !
                        CURSORSTATE BUFFER 2 cell !
                        16 buffer 3 CELL !
                        STARTMAILBOX BUFFER 4 cell !
                        1 buffer 5 cell !
                        cursorx @ buffer 6 cell !
                        cursory @ buffer 7 cell !
                        1 buffer 8 cell !
                        ENDMAILBOX buffer 9 cell ! 

                        BUFFER WRITE
                    ;
                                
                    ( creazione di nuovo framebuffer )
                    : ALLOCATEFRAMEBUFFER ( -- )
                        STARTMAILBOX BUFFER 1 cell !

                        SETPHYSICAL
                        SETVIRTUAL
                        SETDEPTH

                        ALLOCATEBUFFER BUFFER 10 cell !
                        8 BUFFER 11 cell !
                        8 BUFFER 12 cell !
                        1000 BUFFER 13 cell !

                        ENDMAILBOX BUFFER 14 cell !
                        
                        BUFFER WRITE
                    ;
                    ( Cambia il colore di uno o più indici di palette )
                    : SETMULTIPALETTE ( -2 colore1 indice1 colore2 indice2 ... -- )

                        STARTMAILBOX BUFFER 1 cell !
                        0 k!
                        2 i!
                        BEGIN
                            SETPALETTE BUFFER i cell !
                            i+
                            C BUFFER i cell !
                            i+
                            STARTMAILBOX BUFFER i cell ! 
                            i+
                            BUFFER i cell !
                            i+
                            1 BUFFER i cell !
                            i+
                            BUFFER i cell !
                            i+
                            k+
                            DUP -2 = 
                        UNTIL
                        DROP

                        C 6 4 k * * + BUFFER 0 cell !

                        ENDMAILBOX BUFFER i cell !

                        BUFFER WRITE
                    ;

               ( Cambia colori palettes, abilita schermo e release buffer )
                
                        : RELEASEBUFFER ( -- )
                            10 BUFFER 0 CELL !
                            STARTMAILBOX BUFFER 1 CELL !
                            RELEASEBUFFER BUFFER 2 CELL !
                            ENDMAILBOX BUFFER 3 CELL !
                            BUFFER WRITE
                        ;
                        
                        : BLANKSCREENY ( -- )

                            30 BUFFER 0 CELL !
                            STARTMAILBOX BUFFER 1 CELL !
                            BLANKSCREEN BUFFER 2 CELL !
                            4 BUFFER 3 CELL !
                            STARTMAILBOX BUFFER 4 CELL !
                            1 buffer 5 cell !
                            ENDMAILBOX BUFFER 6 CELL !

                            BUFFER WRITE
                        ;

                        : BLANKSCREENN ( -- )

                            30 BUFFER 0 CELL !
                            STARTMAILBOX BUFFER 1 CELL !
                            BLANKSCREEN BUFFER 2 CELL !
                            4 BUFFER 3 CELL !
                            STARTMAILBOX BUFFER 4 CELL !
                            0 buffer 5 cell !
                            ENDMAILBOX BUFFER 6 CELL !

                            BUFFER WRITE
                        ;

                        : GETVIRTUALWHFRAMEBUFFER ( -- )

                            30 BUFFER 0 CELL !
                            STARTMAILBOX BUFFER 1 CELL !
                            GETVIRTUALWH BUFFER 2 CELL !
                            ENDMAILBOX BUFFER 3 CELL !
                            BUFFER WRITE
                        ;

                        : SETSINGLEPALETTE ( colore indice -- )
                            -2 -2 2OVER
                            SETMULTIPALETTE
                            DROP DROP DROP
                        ;
                        
                         ( Per una semplicita nel codice si è preferito distinguere i casi in parole diverse )
                        : CHANGEBACKGROUND ( colore -- )
                            0 \che è l'indice del background
                            -2 -2 2OVER
                            SETMULTIPALETTE
                            DROP DROP DROP
                        ;

                        : CHANGELINE1 ( colore -- )
                            1 \che è l'indice della line 1
                            -2 -2 2OVER
                            SETMULTIPALETTE
                            DROP DROP DROP
                        ;

                        : CHANGELINE2 ( colore -- )
                            2 \che è l'indice che è l'indice della line 2
                            -2 -2 2OVER
                            SETMULTIPALETTE
                            DROP DROP DROP
                        ;

                        : CHANGELINE3 ( colore -- )
                            3 \che è l'indice che è l'indice della line 3
                            -2 -2 2OVER
                            SETMULTIPALETTE
                            DROP DROP DROP
                        ;

                        : INIZIALIZZAPALETTE ( -- )
                            50 BUFFER 0 cell !
                            STARTMAILBOX BUFFER 1 cell !
                            SETPALETTE BUFFER 2 cell !
                            E4 BUFFER 3 cell !
                            STARTMAILBOX BUFFER 4 cell !
                            PALETTEBACKGROUND BUFFER 5 cell ! 
                            LASTPALETTE BUFFER 6 cell !

                            ( PALETTEBACKGROUND )
                            FF000000 BUFFER 7 cell !
                            ( PALETTELINE )
                            FFFFFFFF BUFFER 8 cell !
                            ( PALETTELINE2 )
                            ffaab0c3 BUFFER 9 cell !
                            ( PALETTELINE3 )
                            FFFFFFFF BUFFER 10 cell !
                            

                            ENDMAILBOX BUFFER 7 LASTPALETTE + cell !

                            BUFFER WRITE      
                        ;

                ( TIMER )
                        FE003000 constant CS 
                        FE003004 constant CLO
                        FE003008 constant CHI
                        FE00300C constant C0
                        : delay CLO @ + C0 ! BEGIN CS @ 1 = UNTIL ;

                        : TIMER ( -- )
                        20000 delay
                        ;

                ( SETUP )
                        ALLOCATEFRAMEBUFFER 
                        BUFFER 13 CELL @ 3FFFFFFF AND CONSTANT FRAMEBUFFER
                        INIZIALIZZAPALETTE

                ( MAIN )
                ( DRAW FUNCTION )
                    
                            : DRAWV ( color posx posy lenght  -- )
                                lenght !
                                posy !
                                posx !
                                0 i!
                                BEGIN
                                    DUP
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + ! 
                                    posy @ 1 + posy !
                                    i+
                                    i lenght @ =
                                UNTIL
                                drop
                            ;

                            : DRAWH ( color posx posy lenght -- )
                                
                                lenght !
                                posy !
                                posx !
                                
                                0 j!
                                BEGIN
                                    0 i!
                                    BEGIN
                                        DUP
                                        FRAMEBUFFER posx @ + posy @ WIDTH * + i + !
                                        i 4 + i!
                                        i lenght @ =
                                    UNTIL
                                    posy @ 1 + posy !
                                    j+
                                    j 4 = 
                                UNTIL
                                drop
                            ;
                
                ( PRINT NUMBERS )

                                ( Array utilizzati per memorizzare i valori da memorizzare nel framebuffer per stampare un numero )
                                    variable num0 50 cells allot FIXRASP4
                                    variable num1 50 CELLS ALLOT FIXRASP4
                        

                                ( Array per recuperare gli array numX )
                                variable NumeroPalette 8 CELLS ALLOT FIXRASP4
                                    num0 NumeroPalette 0 cell !
                                    num1 NumeroPalette 1 cell !
                                

                                variable temp
                            ( Carica nell'array specificato tutti i valori contenuti nello stack fino a quando il valore -1)
                                : load ( -1 a1 a2 a3 ... an addr -- )
                                    0 i!
                                    temp !
                                    BEGIN
                                        temp @ i CELL ! 
                                        
                                        i+
                                        
                                        dup
                                        -1
                                        =
                                    UNTIL
                                    DROP
                                ;


                            ( NUMBERS )
                                   -1 0 1010101 0 101 0 1010000 10000 0 100 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 1000000 0 1 10000 0 100 101 0 1010000 0 1010101 0

                                    num0 load

                                    -1 1010101 1010101 1010101 10101010 10101010 10101010 
                                        0 10100 0 0 10100 0 0 10100 0 0 10100 0 0 10100 0 0 
                                        10100 0 0 10100 0 0 10100 101 0 10100 10101 0 10100
                                        1010100 0 10101 1010000 0 10101 1000000 0 10101 0 0 1010101 0

                                    num1 load
                                    
             

                            : STAMP ( n -- )
                                        
                                        DUP
                                        1
                                        swap NumeroPalette swap CELL @
                                        0 i!
                                        BEGIN
                                            2DUP
                                            i cell @
                                            SWAP
                                            framebuffer i 3 mod 4 * + WIDTH i 3 / * +
                                            SWAP
                                            drop 30 2 WIDTH * * +
                                            EA 2 * +
                                            !
                                        
                                            i+
                                            i 30 =
                                        UNTIL
                                        DROP DROP DROP
                                    ;

                ( CURSOR AND DRAWING CURSOR FUNCTION )

                        : ERROR 
                         41 54 41 52 52 45 20 58 emit emit emit emit emit emit emit emit
                        ;

                        ( Le funzioni P AGGIUNGONO il valore n alla posizione attuale )
                        : MOVEPX ( n -- )
                            DUP
                            4 mod 0 =
                            IF 
                             cursorx @ + cursorx !
                            SETCURSOR
                            ELSE
                            ERROR
                            THEN
                        ;

                        : MOVEPY ( n -- )
                            cursory @ + cursory !
                            SETCURSOR
                        ;

                        ( Le funzioni SENZA P spostano il cursore nella posizione desiderata )

                        : MOVEX ( n -- )
                            DUP
                            4 mod 0 =
                            IF 
                            cursorx !
                            SETCURSOR
                            ELSE
                            ERROR
                            THEN
                        ;

                        : MOVEY ( n -- )
                            cursory !
                            SETCURSOR
                        ;

                        : MOVEXY ( posx posy -- )
                           MOVEY
                           MOVEX
                        ;
                        
                        : GETPOSXY ( -- posx posy)
                         cursorx @
                         cursory @
                        ;

                        : MOVECURSOR ( -- )
                         posx @ posy @ movexy
                        ;
        
                        ( Cursor variables )
                            01010101 CONSTANT LINE1
                            02020202 CONSTANT LINE2
                            03030303 CONSTANT LINE3

                            variable defaultline
                            variable color
                            variable angular
                            50 50 MOVEXY
                            SETCURSORINFO
                            SETCURSOR

                        : SETDEFAULTLINE ( COLOR -- )
                            defaultline !
                        ;

                        line1 SETDEFAULTLINE 

                        : DRAWVD ( lenght  -- )
                                GETPOSXY
                                posy !
                                posx !
                                lenght !
                                0 i!
                                DEFAULTLINE @
                                BEGIN
                                    DUP
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posy @ 1 + posy !
                                    i+
                                    i lenght @ =
                                UNTIL
                                MOVECURSOR
                                drop
                            ;
                    
                        : DRAWHR ( lenght  -- )
                                GETPOSXY
                                posy !
                                posx !
                                lenght !
                                0 i!
                                DEFAULTLINE @ 
                                BEGIN
                                    DUP
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posx @ 4 + posx !
                                    i+
                                    i lenght @ =
                                UNTIL
                                MOVECURSOR
                                drop
                            ;

                        : DRAWHL ( lenght  -- )
                                GETPOSXY
                                posy !
                                posx !
                                lenght !
                                0 i!
                                DEFAULTLINE @ 
                                BEGIN
                                    DUP
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posx @ 4 - posx !
                                    i+
                                    i lenght @ =
                                UNTIL
                                MOVECURSOR
                                drop
                            ;

                        : DRAWVU ( lenght  -- )
                                GETPOSXY
                                posy !
                                posx !
                                lenght !
                                0 i!
                                DEFAULTLINE @
                                BEGIN
                                    DUP
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posy @ 1 - posy !
                                    i+
                                    i lenght @ =
                                UNTIL
                                MOVECURSOR
                                drop
                            ;
                    
                        : OBBDR ( line angular lenght  -- )
                                GETPOSXY
                                
                                posy !
                                posx !
                                lenght !
                                angular !
                                color !
                                0 i!

                                BEGIN
                                    0 j!
                                    begin
                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posy @ 1 + posy !
                                    j+
                                    j angular @ =
                                    until


                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posx @ 4 + posx !
                                    i+
                                    i lenght @ =
                                UNTIL
                                    MOVECURSOR
                                
                            ;
                        
                        : OBBDL ( line angular lenght  -- )
                                GETPOSXY
                                posy !
                                posx !
                                lenght !
                                angular ! 
                                color !

                                0 i!
                                
                                BEGIN
                                    0 j!
                                    begin
                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posy @ 1 + posy !
                                    j+
                                    j angular @ =
                                    until
                                    
                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posx @ 4 - posx !
                                
                                    i+
                                    i lenght @ =
                                UNTIL
                                    MOVECURSOR
                            ;
                                            
                        : OBBUL ( line angular lenght  -- )
                                GETPOSXY
                                posy !
                                posx !
                                lenght !
                                angular !
                                color !
                                0 i!
                                
                                BEGIN
                                    0 j!
                                    begin
                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posy @ 1 - posy !
                                    j+
                                    j angular @ =
                                    until
                                    
                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posx @ 4 - posx !
                                
                                    i+
                                    i lenght @ =
                                UNTIL
                                    MOVECURSOR
                            ;
                        
                        : OBBUR ( line angular lenght  -- )
                                GETPOSXY
                                posy !
                                posx !
                                lenght !
                                angular !
                                color !
                                0 i!
                                BEGIN
                                    0 j!
                                    begin
                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posy @ 1 - posy !
                                    j+
                                    j angular @ =
                                    until
                                    
                                    color @
                                    FRAMEBUFFER posx @ + posy @ WIDTH * + !
                                    posx @ 4 + posx !
                                    MOVECURSOR
                                    i+
                                    i lenght @ =
                                UNTIL
                                
                            ;
    
                
                ( EXAMPLES )
                    : SCREENSAVERSTART
                    52 45 56 41 53 4E 45 45 52 43 53 emit emit emit emit emit emit emit emit emit emit emit 
                    ;

                    : SCREENSAVERFINISH
                        4F 54 49 4E 49 46 emit emit emit emit emit emit    
                    ; 

                    : CLEAN ( -- )
                        -90 12 movexy

                        ff000000 CHANGELINE3

                        line3 SETDEFAULTLINE

                        30000 drawhr

                        0 12 movexy
                        SCREENSAVERFINISH
                    ;
                    
                    : SCREENSAVER1
                        SCREENSAVERSTART
                            FFFFFFFF CHANGEBACKGROUND
                            timer timer
                            FF000000 CHANGEBACKGROUND
                            timer timer
                            FFFF0000 CHANGEBACKGROUND
                            timer timer
                            FF00FF00 CHANGEBACKGROUND
                            timer timer
                            FF0000FF CHANGEBACKGROUND
                            timer timer
                            FFFFFFFF CHANGEBACKGROUND
                            timer timer
                            FF000000 CHANGEBACKGROUND
                        SCREENSAVERFINISH
                    ;

                    : SCREENSAVER2
                        CLEAN
                        -90 12 movexy
                        FF0000ff CHANGELINE1
                        line1 SETDEFAULTLINE
                        30000 DRAWHR

                        -90 12 movexy
                        FFff00ff CHANGELINE2
                        LINE2 SETDEFAULTLINE
                        30000 DRAWHR

                        -90 12 movexy
                        FF808080 CHANGELINE1
                        line1 SETDEFAULTLINE
                        30000 DRAWHR

                        -90 12 movexy
                        FF008080 CHANGELINE2
                        LINE2 SETDEFAULTLINE
                        30000 DRAWHR

                        -90 12 movexy
                        FFFFFFFF CHANGELINE1
                        line1 SETDEFAULTLINE
                        30000 DRAWHR

                        CLEAN
                    ;

                    : HEART ( posx posy -- )
                            movexy
                            line1 5 5 obbul
                            line1 4 5 obbdl
                            line1 4 5 obbdl
                            line1 5 10 obbdr
                            line1 5 10 obbur
                            line1 4 5 obbul
                            line1 4 5 obbul
                            line1 5 5 obbdl
                            ff0000ff CHANGELINE1
                    ;

                    : HEARTS ( -- )
                            50 50 HEART
                            100 50 heart
                            150 50 heart
                            200 50 heart
                            250 50 heart
                            300 50 heart

                            50 100 HEART
                            100 100 heart
                            150 100 heart
                            200 100 heart
                            250 100 heart
                            300 100 heart

                            50 200 HEART
                            100 200 heart
                            150 200 heart
                            200 200 heart
                            250 200 heart
                            300 200 heart

                        SCREENSAVERFINISH

                    ;

                    ( TABLE EXAMPLE )
                        variable foot 
                        variable body 
                        : TABLE  (  colorbody colorfoot -- )
                        foot !
                        body !
                        
                            foot @ 0A4 188 0B8 DRAWV \ PUNTA ALTA 
                            foot @ 0A0 188 0B8 DRAWV \ PUNTA ALTA
                            foot @ 084 198 140 DRAWV \ PUNTA bassa
                            body @ 088 198 140 DRAWV \ PUNTA bassa
                            body @ 09c 180 10 DRAWH
                            body @ 098 184 18 DRAWH
                            body @ 094 188 20 DRAWH
                            body @ 090 18c 28 DRAWH
                            body @ 08c 190 30 DRAWH
                            body @ 088 194 38 DRAWH
                            body @ 084 198 40 DRAWH
                            body @ 080 19C 48 DRAWH
                            body @ 07C 1a0 50 DRAWH
                            body @ 078 1a4 58 DRAWH
                            body @ 074 1a8 60 DRAWH
                            body @ 070 1ac 68 DRAWH
                            body @ 06C 1b0 70 DRAWH
                            body @ 068 1b4 78 DRAWH
                            body @ 064 1b8 80 DRAWH
                            body @ 060 1bc 88 DRAWH
                            body @ 05C 1c0 8C DRAWH
                            body @ 058 1C4 8C DRAWH
                            body @ 054 1C8 8C DRAWH
                            body @ 050 1CC 8C DRAWH
                            body @ 04C 1d0 8C DRAWH
                            body @ 048 1d4 8C DRAWH
                            body @ 044 1d8 8C DRAWH
                            
                            foot @ 044 1d8 0AC DRAWV \ sinistra verticale
                            foot @ 048 1d8 0AC DRAWV \ sinistra verticale

                            body @ 044 1dc 88 DRAWH
                            body @ 048 1E0 80 DRAWH
                            body @ 04C 1E4 78 DRAWH
                            body @ 050 1E8 70 DRAWH
                            body @ 054 1EC 68 DRAWH
                            body @ 058 1F0 60 DRAWH
                            body @ 05C 1F4 58 DRAWH
                            body @ 060 1F8 50 DRAWH
                            body @ 064 1FC 48 DRAWH
                            body @ 068 200 40 DRAWH
                            body @ 06C 204 38 DRAWH
                            body @ 070 208 30 DRAWH
                            body @ 074 20C 28 DRAWH
                            body @ 078 210 20 DRAWH
                            body @ 07C 214 18 DRAWH
                            body @ 080 218 10 DRAWH
                            body @ 084 21C 8 DRAWH

                            foot @ E0 1C8 0B0 DRAWV \ DESTRA VERTICALE 
                            foot @ E4 1C4 0B4 DRAWV \ DESTRA VERTICALE
                        ;
                
